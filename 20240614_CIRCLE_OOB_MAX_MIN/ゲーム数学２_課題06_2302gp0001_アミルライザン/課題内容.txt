
----------------------------------------------------------------------
ゲーム数学２　課題　距離を使った判定
----------------------------------------------------------------------

提出期限：１時間後（できているところまでの提出で構いません、そのあと解説していきます）
提出場所：teams->ゲーム数学２->授業（本日）->ファイル->提出

プロジェクトフォルダの名前を【 プロジェクト名_番号_自分の名前 】のように変更して提出してください。
（例えば【 ゲーム数学２_課題00_00000000_○○○○○ 】みたいな感じで）

以下の変更を実装することで【 こういう感じで.exe 】のような挙動になるようにしてください。


今回のプロジェクトはサンプルでおこなった実装の３Ｄ版になりますので、
実装方法はサンプルの方も確認してみてください。


課題１：プレイヤーは黄色い円から出ない

	黄色い円の中心座標（ Float3 area; ）やエリア半径（ AREA_RADIUS ）は既に存在していて
	それを使った円の描画もおこなっています。

	↓これ
	DrawCircle3D_XZ( area, AREA_RADIUS, GetColor( 255, 255, 0 ) );

	サンプルを参考に、プレイヤーが黄色い円から出ないようにします。

	//	Float3 の２つの座標の距離を求める関数
	float 距離 = GetFloat3Distance( 座標１, 座標２ );


課題２：青い円をプレイヤーの前方に一定時間表示

	現状は、スペースキーを押したら、とりあえずプレイヤー座標に青い円の描画はおこなっております。
	（青い円の座標 Float3 front; 半径 FRONT_RADIUS ）

	サンプルやプレイヤーの移動処理を参考にプレイヤーの前方に円を描画するようにします。

	そして、その青い円とＮＰＣ座標を使ってＮＰＣが青い円の中に入っているかの判定をします。

	青い円の中に入っているときは「入っています」の文字列を描画します。


課題３：プレイヤーとＮＰＣの距離を四角を使ってバーのように表示

	現状もバーの枠の四角だけは描画していますので、
	そこにプレイヤーからＮＰＣまでの距離に応じた色付きの四角を描画します。
	
	今回の課題では、最大距離を１０としてバーの描画をします。

	サンプルを参考に実装をしていってください。

	さらに、距離が最大の半分になった時は緑色の四角を赤色にします。


各処理に関して、既に宣言してある変数や関数だけでは処理が実装できない場合、
各自で変数や関数を追加した上で実装をおこなってください。
座標や色・スピードなど細かい数値の指定は特にないので、各自でいい感じの数値を設定することで
【 こういう感じで.exe 】のような動きになるように実装してください。


【 こういう感じで.exe 】の実装が完了した時点で提出をしてもらってかまいませんが、
【発展課題】の実装が完了した人はそちらのほうを提出してください。


--------------------------------------------------
　発展課題
--------------------------------------------------

発展課題１：プレイヤー前方の円を徐々に消していく

	課題で実装したプレイヤーの前方円は、一定時間表示したのちすぐに消えていますが
	その表示を一定時間の間だんだん透明にしていくように変更します。

	↓こんな感じで透明度設定をします

	//	透明度を設定する（これを追加します）
	SetDrawBlendMode( DX_BLENDMODE_ALPHA, 透明度 );

	//	プレイヤーの前の円の描画（もともと実装している物です）
	DrawCircle3D_XZ( front, FRONT_RADIUS, GetColor( 0, 255, 255 ) );

	//	透明度設定を元に戻す（これも追加します）
	SetDrawBlendMode( DX_BLENDMODE_NOBLEND, 0 );


発展課題２：距離バーの色変化をスムーズに

	課題で実装した距離バーの色変化ですが、半分の距離（ 5.0f ）より上か下かで「緑」と「赤」を切り替えています。
	その表示の色を徐々に「緑 〜 赤」になるように実装します。
	（距離が遠いほど「緑色」の値を増やして「赤色」の値を減らす感じ）


