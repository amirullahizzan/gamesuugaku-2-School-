
----------------------------------------------------------------------
ゲーム数学２　課題　プレイヤーの周りのカメラ
----------------------------------------------------------------------

提出期限：１時間後（できているところまでの提出で構いません、そのあと解説していきます）
提出場所：teams->ゲーム数学２->授業（本日）->ファイル->提出

プロジェクトフォルダの名前を【 プロジェクト名_番号_自分の名前 】のように変更して提出してください。
（例えば【 ゲーム数学２_課題00_00000000_○○○○○ 】みたいな感じで）


以下の変更を実装することで【 こういう感じで.exe 】のような挙動になるようにしてください。


課題：ＷＡＳＤキーでプレイヤーの周りにカメラ座標を設定（ Camera.cpp Camera.h ）

	１：そのためには、カメラクラスにどの角度になっているのかの変数が必要になります。
	　　今回は横と縦での回転をおこいます。
	　　（「こういう感じで.exe」では、Float3 のＸとＹをその値として使っています）
	　　（例えば Float3 m_rot; みたいな）

	２：カメラの更新処理では、ＷＡＳＤキーを押すことでその角度の値を増やしたり減らしたりします。
	　　（縦回転の方は、カメラが上に行きすぎたり地面に埋まらないように制限をかけています）

	　　（一応、回転速度として CAMERA_ROT_SPEED を定義しています）
		#define CAMERA_ROT_SPEED	1.0f

	３：見る座標（ m_look ）はプレイヤー座標（ player_pos ）にします。
	　　（プレイヤー座標 player_pos はすでに Update 関数の引数で受け取っています）

	４：カメラ座標はそこから一定距離離れたところにします。
	　　（一応、カメラ距離として CAMERA_LENGTH を定義しています）

		#define CAMERA_LENGTH		10.0f

	　　１・２で決めた角度の方向にその距離分移動させたいので、その距離分のベクトルを作成します。
	　　（「こういう感じで.exe」では、プレイヤーの真後ろを基準のベクトルにするために
	　　　Float3 基準ベクトル( 0.0f, 0.0f, -CAMERA_LENGTH ); のようにしています）

	５：そのベクトルを回転させるための行列を作成します。
		Ｘ軸回転行列：MATRIX Ｘ行列 = MGetRotX( Ｘ角度 );
		Ｙ軸回転行列：MATRIX Ｙ行列 = MGetRotY( Ｙ角度 );

	６：上の２つの行列を１個に合成します。
		MATRIX 合成した行列 = MMult( Ｘ行列, Ｙ行列 );

	７：その行列を使って４のベクトルを回転させます。
		Float3 回転後のベクトル = GetFloat3VTransform( 元ベクトル, 合成した行列 );

	８：見る座標から、７で取得したベクトル分進ませたところをカメラ座標（ m_pos ）にします。


各処理に関して、既に宣言してある変数や関数だけでは処理が実装できない場合、
各自で変数や関数を追加した上で実装をおこなってください。
座標や色・スピードなど細かい数値の指定は特にないので、各自でいい感じの数値を設定することで
【 こういう感じで.exe 】のような動きになるように実装してください。


--------------------------------------------------
発展課題
--------------------------------------------------

スペースキーを押したらカメラ位置をプレイヤーの後ろにリセット

	そのためにはカメラ側にプレイヤーの向きを渡す必要があります。

	//	スペースキーを押したら
	if( PushHitKey( KEY_INPUT_SPACE ) ){
	}
