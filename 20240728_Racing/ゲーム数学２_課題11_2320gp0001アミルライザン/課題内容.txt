
----------------------------------------------------------------------
ゲーム数学２　課題　近いラインを求めて逆走判定など
----------------------------------------------------------------------

提出期限：１時間後（できているところまでの提出で構いません、そのあと解説していきます）
提出場所：teams->ゲーム数学２->授業（本日）->ファイル->提出

プロジェクトフォルダの名前を【 プロジェクト名_番号_自分の名前 】のように変更して提出してください。
（例えば【 ゲーム数学２_課題00_00000000_○○○○○ 】みたいな感じで）


以下の変更を実装することで【 こういう感じで.exe 】のような挙動になるようにしてください。


課題１：プレイヤーに一番近いラインの番号を求めて色の変更

	現状、一番近い線の番号を入れる用の変数を用意して（ near_line ）、
	とりあえず０番目の線を一番近いとしています。

	near_line = 0;

	各線の開始座標・ゴール座標とプレイヤーの座標から、それぞれ距離を求めて、一番近い線の番号を探します。

	//	この２点の線とプレイヤー座標から距離を求める
	プレイヤー座標から線までの距離 = GetFloat3LinePointNearDistance( point[p1], point[p2], player.m_pos );


課題２：逆走判定

	今回のコースは時計回りを想定しています。

	そのため、それぞれの道に沿ったラインの２つの座標も右回りになるように設定しています。

	その中の一番近いラインの方向のベクトルとプレイヤーの進行方向のベクトルを使って
	プレイヤーがラインと同じ方を向いているのか反対方向を向いているのかを調べます。
	（２つのベクトルの内積を使って）

	反対を向いて移動しているときは「逆走しています」の文字列を描画します。


課題３：一番近いラインから離れすぎたらスピードを落とす

	プレイヤー座標と一番近い線までの距離を見て離れすぎていたら移動スピードを小さくします。
	（移動ベクトルの大きさを小さくする）

	一応 Player.cpp の上の方に、これ以上離れたら遅くする制限距離用の定数を用意しています。
	（使ってもいいし、使わなくてもいいし、別ファイルに移動させてもいいし）

	//	一番近い線からこの距離より離れたらスピードを落とす
	#define LIMIT_LENGTH	5.0f


各処理に関して、既に宣言してある変数や関数だけでは処理が実装できない場合、
各自で変数や関数を追加した上で実装をおこなってください。
座標や色・スピードなど細かい数値の指定は特にないので、各自でいい感じの数値を設定することで
【 こういう感じで.exe 】のような動きになるように実装してください。

