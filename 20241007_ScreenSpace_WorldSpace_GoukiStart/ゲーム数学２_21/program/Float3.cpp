#include "Main.h"
#include "Float3.h"

//---------------------------------------------------------------------------------
//	コンストラクタ
//---------------------------------------------------------------------------------
Float3::Float3()
{
	x = 0.0f;
	y = 0.0f;
	z = 0.0f;
}
Float3::Float3( float x, float y, float z )
{
	this->x = x;
	this->y = y;
	this->z = z;
}
Float3::Float3( VECTOR v )
{
	x = v.x;
	y = v.y;
	z = v.z;
}
//---------------------------------------------------------------------------------
//	ゼロ初期化（ＸＹＺの値を０にします）
//---------------------------------------------------------------------------------
void Float3::clear()
{
	x = 0.0f;
	y = 0.0f;
	z = 0.0f;
}
//---------------------------------------------------------------------------------
//	値のセット（ＸＹＺをそれぞれ受け取るバージョン）
//---------------------------------------------------------------------------------
void Float3::set( float x, float y, float z )
{
	this->x = x;
	this->y = y;
	this->z = z;
}
//---------------------------------------------------------------------------------
//	値のセット（ Float3 を受け取るバージョン ）
//---------------------------------------------------------------------------------
void Float3::set( Float3 &v )
{
	x = v.x;
	y = v.y;
	z = v.z;
}
//---------------------------------------------------------------------------------
//	長さ取得
//---------------------------------------------------------------------------------
float Float3::GetLength()
{
	return sqrtf( x * x + y * y + z * z );
}
//---------------------------------------------------------------------------------
//	正規化（ベクトルの長さを１にする）
//---------------------------------------------------------------------------------
void Float3::normalize()
{
	float length = GetLength();
	if( length > 0.0f ){
		x = x / length;
		y = y / length;
		z = z / length;
	}
}
//---------------------------------------------------------------------------------
//	長さ設定
//---------------------------------------------------------------------------------
void Float3::SetLength( float length )
{
	normalize();
	x = x * length;
	y = y * length;
	z = z * length;
}

//---------------------------------------------------------------------------------
//	= 演算子のオーバーロード
//---------------------------------------------------------------------------------
Float3& Float3::operator = ( const Float3 &v )
{
	x = v.x;
	y = v.y; 
	z = v.z; 
	return *this; 
}
//---------------------------------------------------------------------------------
//	+= 演算子のオーバーロード
//---------------------------------------------------------------------------------
Float3& Float3::operator += ( const Float3 &v )
{
	x += v.x;
	y += v.y;
	z += v.z;
	return *this;
}
//---------------------------------------------------------------------------------
//	-= 演算子のオーバーロード
//---------------------------------------------------------------------------------
Float3& Float3::operator -= ( const Float3 &v )
{
	x -= v.x;
	y -= v.y;
	z -= v.z;
	return *this;
}
//---------------------------------------------------------------------------------
//	*= 演算子のオーバーロード
//---------------------------------------------------------------------------------
Float3& Float3::operator *= ( const float f )
{
	x *= f;
	y *= f;
	z *= f;
	return *this;
}
//---------------------------------------------------------------------------------
//	/= 演算子のオーバーロード
//---------------------------------------------------------------------------------
Float3& Float3::operator /= ( const float f )
{
	x /= f;
	y /= f;
	z /= f;
	return *this;
}

//---------------------------------------------------------------------------------
//	+ 演算子のオーバーロード
//---------------------------------------------------------------------------------
Float3 operator + ( const Float3 &v1, const Float3 &v2 )
{
	Float3 v;
	v.x = v1.x + v2.x;
	v.y = v1.y + v2.y;
	v.z = v1.z + v2.z;
	return v;
}
//---------------------------------------------------------------------------------
//	- 演算子のオーバーロード
//---------------------------------------------------------------------------------
Float3 operator - ( const Float3 &v1, const Float3 &v2 )
{
	Float3 v;
	v.x = v1.x - v2.x;
	v.y = v1.y - v2.y;
	v.z = v1.z - v2.z;
	return v;
}
//---------------------------------------------------------------------------------
//	* 演算子のオーバーロード
//---------------------------------------------------------------------------------
Float3 operator * ( const Float3 &v, const float f )
{
	Float3 r;
	r.x = v.x * f;
	r.y = v.y * f;
	r.z = v.z * f;
	return r;
}
//---------------------------------------------------------------------------------
//	/ 演算子のオーバーロード
//---------------------------------------------------------------------------------
Float3 operator / ( const Float3 &v, const float f )
{
	Float3 r;
	r.x = v.x / f;
	r.y = v.y / f;
	r.z = v.z / f;
	return r;
}

//---------------------------------------------------------------------------------
//	DXライブラリで使う VECTOR を返す
//---------------------------------------------------------------------------------
VECTOR Float3::VGet()
{
	VECTOR v;
	v.x = x;
	v.y = y;
	v.z = z;
	return v;
}
//---------------------------------------------------------------------------------
//	DXライブラリで使う VECTOR の値を取得して設定
//---------------------------------------------------------------------------------
void Float3::VSet( VECTOR v )
{
	x = v.x;
	y = v.y;
	z = v.z;
}

//---------------------------------------------------------------------------------
//	２つの Float3 の距離を求める
//---------------------------------------------------------------------------------
float GetFloat3Distance( Float3 &pos1, Float3 &pos2 )
{
	Float3 v = pos1 - pos2;
	return v.GetLength();
}
//---------------------------------------------------------------------------------
//	２つの Float3 の内積を求める
//---------------------------------------------------------------------------------
float GetFloat3Dot( Float3 &v1, Float3 &v2 )
{
	return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}
//---------------------------------------------------------------------------------
//	２つの Float3 の外積を求める
//---------------------------------------------------------------------------------
Float3 GetFloat3Cross( Float3 &v1, Float3 &v2 )
{
	Float3 v;
	v.x = v1.y * v2.z - v1.z * v2.y;
	v.y = v1.z * v2.x - v1.x * v2.z;
	v.z = v1.x * v2.y - v1.y * v2.x;
	return v;
}
//---------------------------------------------------------------------------------
//	Float3 を MATRIX で変換した Float3 を返す
//---------------------------------------------------------------------------------
Float3 GetFloat3VTransform( Float3 &v, MATRIX &mat )
{
	VECTOR base = v.VGet();
	VECTOR change = VTransform( base, mat );

	Float3 ret( change );
	return ret;
}
