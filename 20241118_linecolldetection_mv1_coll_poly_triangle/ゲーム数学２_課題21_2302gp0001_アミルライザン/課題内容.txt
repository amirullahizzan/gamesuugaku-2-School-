
----------------------------------------------------------------------
ゲーム数学２　課題　線の通過判定
----------------------------------------------------------------------

提出期限：１時間後（できているところまでの提出で構いません、そのあと解説していきます）
提出場所：teams->ゲーム数学２->授業（本日）->ファイル->提出

プロジェクトフォルダの名前を【 プロジェクト名_番号_自分の名前 】のように変更して提出してください。
（例えば【 ゲーム数学２_課題00_00000000_○○○○○ 】みたいな感じで）


以下の変更を実装することで【 こういう感じで.exe 】のような挙動になるようにしてください。


課題：線の通過判定（ Game.cpp ）

	現状のプロジェクトでは、プレイヤーが線の右にいるか左にいるかの判定をしていますが
	サンプルで表示していた文字列はコメントにします。

	今回は、線がプレイヤーを通過したタイミングの時だけ「線が通過しました」の文字列を表示します。
	（「こういう感じで.exe」では１秒間表示しています）

	「回転前」の線とプレイヤーの位置関係と、「回転後」の位置関係が違っているとき
	（外積のＹの値の符号が逆の時）
	が線が通過したタイミングになります。

	ただ、上の処理だけでは線が反対を向いていたりプレイヤーが遠くにいても文字列を描画してしまいますので、
	さらにプレイヤー座標が線の開始座標とゴール座標の間にある時だけ文字列描画を開始するようにします。

	調べ方としましては、プレイヤーから線の開始座標へのベクトルと、プレイヤーから線のゴール座標へのベクトル
	この２つのベクトルの内積を求める事で、プレイヤーが開始座標とゴール座標の間にいるかが分かります。

	//	２つのベクトルの内積を取得
	内積 = GetFloat3Dot( ベクトル１, ベクトル２ );


各処理に関して、既に宣言してある変数や関数だけでは処理が実装できない場合、
各自で変数や関数を追加した上で実装をおこなってください。
座標や色・スピードなど細かい数値の指定は特にないので、各自でいい感じの数値を設定することで
【 こういう感じで.exe 】のような動きになるように実装してください。


--------------------------------------------------
発展課題
--------------------------------------------------

壁モデル（ wall.mqoz ）を適当なところにおいて線とモデルで当たり判定をする

	「こういう感じで（発展）.exe」では、読み込んだ壁モデルを描画だけしています。

	MV1DrawModel( wall_model );

当たっていたらその座標をゴール座標にする

	〇線とモデルの当たり判定

	・初期化で当たり情報の作成
	　MV1SetupCollInfo( モデル番号 );

	・更新処理で当たり情報の更新
	　MV1RefreshCollInfo( モデル番号 );

	・当たり情報と線の当たり判定をして判定結果を取得
	　MV1_COLL_RESULT_POLY 結果 = MV1CollCheck_Line( モデル番号, -1, 線の座標１, 線の座標２ );

	・その結果が当たっていたら（結果.HitFlag をみます）、当たった座標（結果.HitPosition ）を線のゴール座標に設定しなおす

上の処理でゴール座標が当たった座標に新たに設定されると
プレイヤーが壁モデルに隠れているときは線の通過判定をしない状態になります。

--------------------------------------------------
発展課題２
--------------------------------------------------

三角形の中の座標判定

	例えばこんな感じの３点の座標を使っています。

	//	「こういう感じで（発展２）.exe」で使う三角形の座標
	Float3 pos1(  3.0f, 0.0f,  -5.0f );
	Float3 pos2( 15.0f, 0.0f, -10.0f );
	Float3 pos3(  7.0f, 0.0f, -17.0f );

	判定としましては、

	pos1 から pos2 へのベクトルと、pos1 からプレイヤー座標へのベクトル
	この２つのベクトルの外積を取得。

	↑というのを３座標分おこないます。

	もし、プレイヤーが三角形の中にある時は、プレイヤー座標はすべての辺の「右」か「左」になります。
	（右か左かの判断を外積を使って判断します）

